from pybrain.tools.shortcuts import buildNetwork
from pybrain.datasets import SupervisedDataSet
from pybrain.supervised.trainers import BackpropTrainer
import os
from PIL import Image
from pybrain.tools.xml.networkreader import NetworkReader
from pybrain.tools.xml.networkwriter import NetworkWriter


net = buildNetwork(10000,64,4,bias=True)
ds = SupervisedDataSet(10000, 4)


def train(net,ds,p=500):
	trainer = BackpropTrainer(net,ds)
	trainer.trainUntilConvergence(maxEpochs=p)
	return trainer


def load_data():
	lst = os.listdir("./train_images")
	for file in lst:
		img = Image.open("./train_images/"+str(file))
		counter = 0
		pixels = []
		for i in range(img.size[0]):
			for j in range(img.size[1]):
				coordinate = x,y = i,j;
				pixelValue = img.getpixel(coordinate);
				

				pixels.append(pixelValue);
				counter = counter+1;
				file_.write(str(pixels[counter-1])+" ")
		file_.write("\n")


def load_ds():
	file=open("parse_int_1.data",'r')
	for line in file.readlines():
		data_p = [int(x) for x in line.strip().split(" ") if x!=""]
		indata = tuple(data_p[:10000])
		outdata = tuple(data_p[10000:])
		ds.addSample(indata,outdata)
#load_data()
load_ds()

#print(len(ds))
print("Training\n")
train(net,ds,p=500)
#for inpt, target in ds:
#	print inpt, target 



#same weights
NetworkWriter.writeToFile(net,'network.xml')
#load instruction
#net = NetworkReader.readFrom('network.xml')



